use std::{sync::Arc, usize};

use ndarray::{Array1, s};
use rustfft::{
    num_complex::{Complex, Complex64},
    Fft, FftPlanner,
};

fn hertz_to_mel(mel: f64) -> f64 {
    return 2595.0 * (1.0 + (mel / 700.0)).log10();
}

fn mel_to_hertz(mel: f64) -> f64 {
    return 700.0 * (mel / 2595.0).powi(10) - 700.0;
}

/**
 * Single exponential filter value. Returns the new value to the stack
 */
fn exp_filter_single(current_val: f64, new_val: f64, alpha_decay: f64, alpha_rise: f64) -> f64 {
    let alpha = if new_val > current_val {
        alpha_rise
    } else {
        alpha_decay
    };
    return alpha * new_val + (1.0 - alpha) * current_val;
}

fn exp_filter_array(
    current: &ndarray::Array1<f64>,
    new: &ndarray::Array1<f64>,
    alpha_decay: f64,
    alpha_rise: f64,
) -> ndarray::Array1<f64> {
    assert_eq!(current.len(), new.len());
    current
        .into_iter()
        .enumerate()
        .map(|(i, c)| {
            let alpha = if new[i] - c > 0.0 {
                alpha_rise
            } else {
                alpha_decay
            };
            alpha * new[i] + (1.0 - alpha) * c
        })
        .collect()
}

fn new_rfft(fft_size: usize) -> Arc<dyn Fft<f64>> {
    FftPlanner::new().plan_fft_forward(fft_size)
}

fn exec_fft(buffer: &Array1<f64>, fft: Arc<dyn Fft<f64>>) -> Array1<f64> {
    let mut complex_buffer: Array1<Complex64> =
        buffer.iter().map(|x| Complex64::new(*x, 0.0)).collect();

    fft.process(complex_buffer.as_slice_mut().unwrap());

    complex_buffer
        .iter()
        .enumerate()
        .filter_map(|(i, x)| {
            if i < buffer.len() / 2 {
                None
            } else {
                Some(x.re)
            }
        })
        .collect()
}

/**
 * A transformation matrix for mel spectrum
 * mel\_y: the transformation matrix
 * mel\_x: the center frequencies of the mel bands
 */
struct MelBank {
    x: Array1<f64>,
    y: Array1<f64>,
}

/**
* Generate a MelBank according to parameters
* mic\_rate: the sampling rate of the microphone
* n\_rolling\_history: the number of samples in the rolling history
*/
pub fn create_mel_bank(
    mic_rate: u32,
    n_rolling_history: u32,
    fps: u32,
    n_fft_bins: u32,
    min_freq: u32,
    max_freq: u32,
) -> MelBank {
    let sample_rate = (mic_rate * n_rolling_history) as f64 / (2.0 * fps as f64);
    let n_mel_bands = ( ( mic_rate * n_rolling_history ) as f64 / (2.0 * fps as f64) ) as i32;

    let mel_max = hertz_to_mel(max_freq as f64);
    let mel_min= hertz_to_mel(min_freq as f64);
    let delta_mel =(mel_max - mel_min).abs() / (n_mel_bands as f64 + 1.0);
    let frequencies_mel = Array1::from_iter((0..n_mel_bands + 2).map(|i| {
        i as f64 * delta_mel + mel_min
    }));

    let lower_edges_mel = frequencies_mel.slice(s![..n_mel_bands]);
    let center_frequencies_mel = frequencies_mel.slice(s![1..n_mel_bands + 1]);
    let upper_edges_mel = frequencies_mel.slice(s![2..]);

    let step = sample_rate / 2.0 / (n_fft_bins - 1) as f64;
    let mel_x = ndarray::Array1::linspace(0., n_fft_bins as f64 *step, n_fft_bins as usize);
    let mut mel_y = ndarray::Array2::new(n_fft_bins, n_mel_bands);


    for i in 0..n_mel_bands {
        let lower = lower_edges_mel[i];
        let center = center_frequencies_mel[i];
        let upper = upper_edges_mel[i];

        for j in 0..n_fft_bands {
      if ((mel_x[j] >= lower) == (mel_x[j] <= center)) {
        mel_y[i * n_fft_bands + j] = (mel_x[j] - lower) / (center - lower);
      }
      if ((mel_x[j] >= center) == (mel_x[j] <= upper)) {
        mel_y[i * n_fft_bands + j] = (upper - mel_x[j]) / (upper - center);
            
        }
    }



    lower_edges_mel = melfrequencies


    MelBank {
        x: Array1::new(1024),
        y: 
    }
}

#[cfg(test)]
mod test {
    use ndarray::arr1;

    use super::*;

    #[test]
    fn test_exp_filter() {
        let expected = ndarray::arr1(&[
            0.19133972, 0.0466747, 0.78939848, 0.12620031, 0.84045104, 0.12606363, 0.09315127,
            0.27223475, 0.32086958, 0.54406098, 0.27306298, 0.07422397, 0.3567698, 0.63903146,
            0.54285225, 0.8732071, 0.05015262, 0.17689518, 0.21245038, 0.39821787, 0.17053282,
            0.96182047, 0.19629877, 0.16890264, 0.42743507, 0.05561293, 0.64582918, 0.28475749,
            0.38559554, 0.30715199, 0.06509077, 0.56056894, 0.74032583, 0.58646942, 0.14819371,
            0.71098846, 0.10836583, 0.18009493, 1.03677603, 0.0939396, 0.19987542, 0.71693586,
            0.75004527, 0.62607192, 0.81776577, 0.55823947, 0.60164642, 0.32214651, 0.25142108,
            0.01572098, 0.98233563, 0.08420938, 0.20684954, 1.47828133, 0.56246047, 0.66047807,
            0.439108, 0.21602114, 0.56722197, 0.43276743, 0.38860071, 0.50480968, 0.28100791,
            0.09338005, 0.3620024, 1.01813112, 0.88354865, 0.17115398, 0.38873698, 0.13448836,
            0.01481685, 1.08462796, 0.42399389, 0.15059725, 0.21701932, 0.22097095, 0.20424413,
            0.06263462, 0.67498377, 1.14723017, 0.14540819, 0.15239976, 0.31702893, 0.39450086,
            1.24415747, 0.14300254, 0.12849241, 0.25839275, 0.10482977, 0.17225263, 0.13979815,
            0.37850805, 0.67066182, 0.13482642, 0.23988855, 0.09029223, 0.58151291, 0.36260366,
            0.15923866, 0.9093225, 0.29593426, 1.26483096, 0.03955397, 0.28615806, 0.25365253,
            0.25355763, 0.69417152, 0.61566914, 0.29388144, 0.23124628, 0.18343216, 0.13974017,
            0.77269906, 0.4325813, 0.14269003, 0.14469567, 0.45572424, 1.16938906, 1.21256352,
            0.60719386, 0.36757455, 0.39430982, 0.61748262, 0.29613119, 1.12228896, 0.28436277,
            0.00991962,
        ]);

        let update = ndarray::arr1(&[
            0.372679438,
            0.0833493948,
            1.56879697,
            0.242400624,
            1.67090209,
            0.242127251,
            0.176302539,
            0.534469501,
            0.631739156,
            1.07812196,
            0.536125964,
            0.138447941,
            0.703539597,
            1.26806292,
            1.07570449,
            1.7364142,
            0.0903052314,
            0.343790353,
            0.414900752,
            0.786435734,
            0.331065632,
            1.91364094,
            0.382597547,
            0.327805286,
            0.844870141,
            0.101225865,
            1.28165836,
            0.559514986,
            0.761191086,
            0.604303975,
            0.120181532,
            1.11113788,
            1.47065166,
            1.16293883,
            0.286387423,
            1.41197693,
            0.206731657,
            0.350189855,
            2.06355207,
            0.177879204,
            0.389750849,
            1.42387171,
            1.49009053,
            1.24214383,
            1.62553154,
            1.10647894,
            1.19329284,
            0.63429302,
            0.492842163,
            0.0214419542,
            1.95467126,
            0.158418753,
            0.403699089,
            2.94656267,
            1.11492094,
            1.31095615,
            0.868216009,
            0.422042283,
            1.12444395,
            0.855534859,
            0.767201418,
            0.999619357,
            0.552015829,
            0.176760109,
            0.714004797,
            2.02626224,
            1.7570973,
            0.332307967,
            0.767473965,
            0.258976729,
            0.0196337098,
            2.15925591,
            0.837987784,
            0.291194494,
            0.424038647,
            0.431941904,
            0.398488252,
            0.115269235,
            1.33996755,
            2.28446035,
            0.280816374,
            0.294799529,
            0.624057863,
            0.779001725,
            2.47831494,
            0.276005083,
            0.246984811,
            0.506785503,
            0.199659542,
            0.334505257,
            0.269596305,
            0.747016091,
            1.33132365,
            0.259652834,
            0.469777095,
            0.170584454,
            1.15302582,
            0.715207317,
            0.308477316,
            1.808645,
            0.58186853,
            2.51966192,
            0.0691079306,
            0.562316112,
            0.497305052,
            0.497115255,
            1.37834304,
            1.22133827,
            0.577762874,
            0.45249256,
            0.356864318,
            0.269480333,
            1.53539812,
            0.855162608,
            0.27538005,
            0.279391331,
            0.901448475,
            2.32877813,
            2.41512705,
            1.20438772,
            0.725149099,
            0.778619649,
            1.22496524,
            0.582262387,
            2.23457791,
            0.558725532,
            0.00196216942,
        ]);

        let current = ndarray::Array::ones(127) * 0.01;
        let output = exp_filter_array(&current, &update, 0.1, 0.5);
        assert!(output.abs_diff_eq(&expected, 0.1));
    }

    #[test]
    fn test_exec_fft_inplace() {
        let fft = new_rfft(1024);

        let input = arr1(&[
            1.48094528,
            0.59696835,
            -0.95853714,
            2.06560912,
            -0.48211678,
            2.65378565,
            -1.63017596,
            -1.7736234,
            -0.18237599,
            0.78558729,
            1.92762221,
            -0.11180059,
            -0.37506153,
            1.76112525,
            0.86316855,
            -0.64965065,
            -0.62537752,
            -1.20447363,
            -2.01692314,
            0.10712862,
            1.17423722,
            -0.62542565,
            1.16431726,
            -0.6035666,
            -0.17092301,
            2.22440035,
            0.69971944,
            -0.23871011,
            -0.75631096,
            0.18585501,
            0.48200846,
            1.03091996,
            0.3238756,
            0.76963387,
            -0.22378036,
            -0.0591962,
            0.0908271,
            -0.36701689,
            -0.92282657,
            -0.44215906,
            -0.87652361,
            0.26975025,
            1.0402947,
            0.09392486,
            -0.45810233,
            -1.75546854,
            -0.11624388,
            -0.01373014,
            0.26311115,
            0.8972705,
            0.72080431,
            0.29768675,
            -0.49910996,
            0.26488135,
            0.21259605,
            0.28471469,
            -0.47448167,
            -1.5913399,
            0.90448678,
            -0.66089208,
            0.12687497,
            -1.12807841,
            0.72215092,
            -0.37211337,
            0.43200432,
            0.25162815,
            0.25028231,
            -1.1038772,
            -0.39124264,
            -0.51855742,
            0.52418886,
            0.35077276,
            -0.33244553,
            -0.41294771,
            -0.32350463,
            -0.00789725,
            -0.86683017,
            -0.42526519,
            -1.71192727,
            0.18745107,
            0.02441095,
            0.14731432,
            -1.22928049,
            0.66580587,
            -0.99368776,
            -1.20580196,
            -0.17206011,
            0.29488154,
            1.52847238,
            0.33654293,
            -0.25829216,
            -0.41296341,
            -0.63304026,
            0.40210274,
            0.92177561,
            -1.89623355,
            -0.70084883,
            1.17562188,
            -0.69704496,
            -0.01975832,
            0.27325999,
            1.24249352,
            0.95413082,
            0.89987305,
            -0.79308366,
            0.86759218,
            0.78226561,
            0.01063997,
            -0.3325533,
            0.20462194,
            0.78163695,
            -0.90694826,
            -0.14670344,
            -1.55923589,
            0.88154475,
            -0.31585416,
            0.53328458,
            0.19075993,
            -0.31190746,
            1.40099541,
            0.59151294,
            -0.68778615,
            -0.46705669,
            -0.6522581,
            0.32920506,
            0.15964008,
            0.53220806,
            -0.82599626,
        ]);
        let expected = arr1(&[
            0.93619659,
            12.07992828,
            4.62251223,
            5.32819342,
            7.58289659,
            8.5404077,
            7.11749831,
            12.40593877,
            5.7864796,
            3.62987399,
            13.4648943,
            8.12444372,
            10.95093531,
            18.45956652,
            4.74087849,
            6.01085309,
            3.56161329,
            16.17553834,
            2.48966423,
            3.36533988,
            8.56811354,
            4.10135118,
            8.28576614,
            24.05581369,
            9.50480157,
            7.09236442,
            10.27192606,
            3.0066255,
            15.08569502,
            18.37175771,
            12.24048181,
            11.07806431,
            9.59349492,
            7.24682706,
            2.60169519,
            7.02964612,
            6.45974591,
            1.82847498,
            9.18781832,
            1.26217906,
            13.4251645,
            7.15893595,
            5.61697548,
            7.80729343,
            4.20309911,
            12.49600029,
            18.08385135,
            7.20190626,
            6.13260927,
            7.91904732,
            2.85813122,
            7.13626733,
            7.17952119,
            14.43491241,
            17.27436244,
            7.49754677,
            11.34455882,
            5.11730567,
            6.46300368,
            16.18436041,
            10.91069978,
            10.07467636,
            10.88957515,
            4.50117537,
            0.12250971,
        ]);

        let input2 = arr1(&[
            1.48094528,
            0.59696835,
            -0.95853714,
            2.06560912,
            -0.48211678,
            2.65378565,
            -1.63017596,
            -1.7736234,
            -0.18237599,
            0.78558729,
            1.92762221,
            -0.11180059,
            -0.37506153,
            1.76112525,
            0.86316855,
            -0.64965065,
            -0.62537752,
            -1.20447363,
            -2.01692314,
            0.10712862,
            1.17423722,
            -0.62542565,
            1.16431726,
            -0.6035666,
            -0.17092301,
            2.22440035,
            0.69971944,
            -0.23871011,
            -0.75631096,
            0.18585501,
            0.48200846,
            1.03091996,
            0.3238756,
            0.76963387,
            -0.22378036,
            -0.0591962,
            0.0908271,
            -0.36701689,
            -0.92282657,
            -0.44215906,
            -0.87652361,
            0.26975025,
            1.0402947,
            0.09392486,
            -0.45810233,
            -1.75546854,
            -0.11624388,
            -0.01373014,
            0.26311115,
            0.8972705,
            0.72080431,
            0.29768675,
            -0.49910996,
            0.26488135,
            0.21259605,
            0.28471469,
            -0.47448167,
            -1.5913399,
            0.90448678,
            -0.66089208,
            0.12687497,
            -1.12807841,
            0.72215092,
            -0.37211337,
            0.43200432,
            0.25162815,
            0.25028231,
            -1.1038772,
            -0.39124264,
            -0.51855742,
            0.52418886,
            0.35077276,
            -0.33244553,
            -0.41294771,
            -0.32350463,
            -0.00789725,
            -0.86683017,
            -0.42526519,
            -1.71192727,
            0.18745107,
            0.02441095,
            0.14731432,
            -1.22928049,
            0.66580587,
            -0.99368776,
            -1.20580196,
            -0.17206011,
            0.29488154,
            1.52847238,
            0.33654293,
            -0.25829216,
            -0.41296341,
            -0.63304026,
            0.40210274,
            0.92177561,
            -1.89623355,
            -0.70084883,
            1.17562188,
            -0.69704496,
            -0.01975832,
            0.27325999,
            1.24249352,
            0.95413082,
            0.89987305,
            -0.79308366,
            0.86759218,
            0.78226561,
            0.01063997,
            -0.3325533,
            0.20462194,
            0.78163695,
            -0.90694826,
            -0.14670344,
            -1.55923589,
            0.88154475,
            -0.31585416,
            0.53328458,
            0.19075993,
            -0.31190746,
            1.40099541,
            0.59151294,
            -0.68778615,
            -0.46705669,
            -0.6522581,
            0.32920506,
            0.15964008,
            0.53220806,
            -0.82599626,
        ]);

        let expected2 = arr1(&[
            7.69577743,
            2.62287029,
            10.01411468,
            3.85282418,
            10.81975165,
            16.49297318,
            14.30499993,
            10.4859125,
            4.40348769,
            5.56751058,
            9.91837049,
            4.71902518,
            11.95816927,
            15.32312648,
            2.70478977,
            13.1072803,
            15.29854687,
            7.64396501,
            13.56666816,
            16.23310527,
            1.02985706,
            14.11000968,
            12.20873364,
            3.22182731,
            4.82327246,
            3.34067801,
            11.07206474,
            7.47018391,
            4.07894719,
            12.82418822,
            0.73430747,
            17.49504071,
            6.53712826,
            7.11302031,
            5.64773893,
            10.65740371,
            4.93400085,
            4.69097768,
            12.06268886,
            19.75054915,
            3.16489861,
            14.05630668,
            14.50266619,
            9.95938023,
            6.70953513,
            5.84247465,
            10.13910577,
            8.85252002,
            0.34389655,
            5.45729717,
            13.37242826,
            17.45610918,
            6.185361,
            5.69964193,
            7.92376485,
            1.59738062,
            9.14764518,
            18.59852037,
            12.81477622,
            6.36580449,
            8.41633164,
            9.44308588,
            17.61807186,
            7.92132952,
            4.89326539,
        ]);

        let output = exec_fft(&input, fft.clone()); // TODO: probably not the best way to
                                                    // accomplish this
        assert!(output.abs_diff_eq(&expected, 0.1));
        let output2 = exec_fft(&input2, fft.clone());
        assert!(output2.abs_diff_eq(&expected2, 0.1));
    }
}
